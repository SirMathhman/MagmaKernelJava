single val Chars =: {
	val toChar = (Int singleDigit) => Char : {
		val asciiValue = singleDigit + 48;
		return <Char> asciiValue;
	}
}

single val Integers =: {
	val count = (Int value) => Int : {
		val doubleValue = <Double> value;
		val tens = <Int> Math.logDouble(10, doubleValue);
		return tens + 1;
	}

	val digitAt = (Int value, Int index) => Int : {
		val valueCount = count(value);
		val indexToUse = valueCount - index - 1;
		val parentIndex = indexToUse + 1;
		val parentPow = Math.powInt(10, parentIndex);
		val childPow = Math.powInt(10, indexToUse);
		val remainder = value % parentPow;
		return remainder / childPow;
	}

	val toString = (Int value) => String : {
		val valueCount = count(value);
		val stringSize = valueCount + 1;
		val block = <String> Memory.allocate(stringSize);
		var i = 0;
		while(i < valueCount) {
			val digit = digitAt(value, i);
			val c = Chars.toChar(digit);
			val iIndex = block + i;
			*iIndex = c;
			i = i + 1
		}
		val lastIndex = block + valueCount;
		lastIndex = 0;
		return block;
	}
}